/*************************************************
AUTO Generated by SSoT.me - 2019
    EJ Alexandra - An airtable Tool
    DO NOT MAKE CHANGES TO THIS FILE - THEY WILL BE OVERWRITTEN
*************************************************/
using dc = AirtableDirect.CLI.Lib.DataClasses;
using SSoT.me.AirtableToDotNetLib;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace AirtableToDotNet.APIWrapper
{
    public partial class AirtableDirectCLIAirtableAPIWrapper : AirtableAPIWrapperBase
    {
        
        /// <summary>
        /// Called before a game is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="game">The game to update</param>
        partial void BeforeUpdateGame(dc.Game game);

        /// <summary>
        /// Called after a game is updated
        /// </summary>
        /// <param name="game">The game which was updated</param>
        partial void AfterUpdateGame(dc.Game game);

        /// <summary>
        /// Called before a game is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="game">The game to add</param>
        partial void BeforeAddGame(dc.Game game);

        /// <summary>
        /// Called after a game is added
        /// </summary>
        /// <param name="game">The game which was added</param>
        partial void AfterAddGame(dc.Game game);

        /// <summary>
        /// Called before a game is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="game">The game to add</param>
        partial void BeforeDeleteGame(dc.Game game);

        /// <summary>
        /// Called after a game is deleted
        /// </summary>
        /// <param name="game">The game which was deleted</param>
        partial void AfterDeleteGame(dc.Game game);
        /// <summary>
        /// Called before a gamedetail is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="gamedetail">The gamedetail to update</param>
        partial void BeforeUpdateGameDetail(dc.GameDetail gamedetail);

        /// <summary>
        /// Called after a gamedetail is updated
        /// </summary>
        /// <param name="gamedetail">The gamedetail which was updated</param>
        partial void AfterUpdateGameDetail(dc.GameDetail gamedetail);

        /// <summary>
        /// Called before a gamedetail is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="gamedetail">The gamedetail to add</param>
        partial void BeforeAddGameDetail(dc.GameDetail gamedetail);

        /// <summary>
        /// Called after a gamedetail is added
        /// </summary>
        /// <param name="gamedetail">The gamedetail which was added</param>
        partial void AfterAddGameDetail(dc.GameDetail gamedetail);

        /// <summary>
        /// Called before a gamedetail is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="gamedetail">The gamedetail to add</param>
        partial void BeforeDeleteGameDetail(dc.GameDetail gamedetail);

        /// <summary>
        /// Called after a gamedetail is deleted
        /// </summary>
        /// <param name="gamedetail">The gamedetail which was deleted</param>
        partial void AfterDeleteGameDetail(dc.GameDetail gamedetail);
        /// <summary>
        /// Called before a character is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="character">The character to update</param>
        partial void BeforeUpdateCharacter(dc.Character character);

        /// <summary>
        /// Called after a character is updated
        /// </summary>
        /// <param name="character">The character which was updated</param>
        partial void AfterUpdateCharacter(dc.Character character);

        /// <summary>
        /// Called before a character is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="character">The character to add</param>
        partial void BeforeAddCharacter(dc.Character character);

        /// <summary>
        /// Called after a character is added
        /// </summary>
        /// <param name="character">The character which was added</param>
        partial void AfterAddCharacter(dc.Character character);

        /// <summary>
        /// Called before a character is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="character">The character to add</param>
        partial void BeforeDeleteCharacter(dc.Character character);

        /// <summary>
        /// Called after a character is deleted
        /// </summary>
        /// <param name="character">The character which was deleted</param>
        partial void AfterDeleteCharacter(dc.Character character);
        /// <summary>
        /// Called before a appuser is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to update</param>
        partial void BeforeUpdateAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is updated
        /// </summary>
        /// <param name="appuser">The appuser which was updated</param>
        partial void AfterUpdateAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called before a appuser is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to add</param>
        partial void BeforeAddAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is added
        /// </summary>
        /// <param name="appuser">The appuser which was added</param>
        partial void AfterAddAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called before a appuser is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to add</param>
        partial void BeforeDeleteAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is deleted
        /// </summary>
        /// <param name="appuser">The appuser which was deleted</param>
        partial void AfterDeleteAppUser(dc.AppUser appuser);
        /// <summary>
        /// Called before a weapon is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="weapon">The weapon to update</param>
        partial void BeforeUpdateWeapon(dc.Weapon weapon);

        /// <summary>
        /// Called after a weapon is updated
        /// </summary>
        /// <param name="weapon">The weapon which was updated</param>
        partial void AfterUpdateWeapon(dc.Weapon weapon);

        /// <summary>
        /// Called before a weapon is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="weapon">The weapon to add</param>
        partial void BeforeAddWeapon(dc.Weapon weapon);

        /// <summary>
        /// Called after a weapon is added
        /// </summary>
        /// <param name="weapon">The weapon which was added</param>
        partial void AfterAddWeapon(dc.Weapon weapon);

        /// <summary>
        /// Called before a weapon is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="weapon">The weapon to add</param>
        partial void BeforeDeleteWeapon(dc.Weapon weapon);

        /// <summary>
        /// Called after a weapon is deleted
        /// </summary>
        /// <param name="weapon">The weapon which was deleted</param>
        partial void AfterDeleteWeapon(dc.Weapon weapon);
        /// <summary>
        /// Called before a level is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="level">The level to update</param>
        partial void BeforeUpdateLevel(dc.Level level);

        /// <summary>
        /// Called after a level is updated
        /// </summary>
        /// <param name="level">The level which was updated</param>
        partial void AfterUpdateLevel(dc.Level level);

        /// <summary>
        /// Called before a level is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="level">The level to add</param>
        partial void BeforeAddLevel(dc.Level level);

        /// <summary>
        /// Called after a level is added
        /// </summary>
        /// <param name="level">The level which was added</param>
        partial void AfterAddLevel(dc.Level level);

        /// <summary>
        /// Called before a level is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="level">The level to add</param>
        partial void BeforeDeleteLevel(dc.Level level);

        /// <summary>
        /// Called after a level is deleted
        /// </summary>
        /// <param name="level">The level which was deleted</param>
        partial void AfterDeleteLevel(dc.Level level);

        /// <summary>
        /// Throw this exception to SKIP a CRUD operation like update, insert or delete
        /// </summary>
        public class SkipOperationException : Exception
        {
            public SkipOperationException()
            {
            }

            public SkipOperationException(string message) : base(message)
            {
            }

            public SkipOperationException(string message, Exception innerException) : base(message, innerException)
            {
            }

            protected SkipOperationException(SerializationInfo info, StreamingContext context) : base(info, context)
            {
            }
        }

        /// <summary>
        /// Returns a list of Games
        /// </summary>
        /// <param name="view">the specific view to pull Games from</param>
        /// <returns>The list of Games from the given view</returns>
        public IEnumerable<dc.Game> GetGames(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Game", "Games", "Games", where, view, maxPages);
            return rows.ConvertTo<dc.Game>();
        }

        /// <summary>
        /// Update the given game
        /// </summary>
        /// <param name="game">The game to update</param>
        public dc.Game Update(dc.Game game)
        {
            try
            {
                this.BeforeUpdateGame(game);
                game = this.UpdateAirtableRow<dc.Game>("Game", "Games", "Games", game);
                this.AfterUpdateGame(game);
                return game;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given game
        /// </summary>
        /// <param name="game">The game to delete</param>
        public void Delete(dc.Game game)
        {
            try
            {
                this.BeforeDeleteGame(game);
                this.DeleteAirtableRow<dc.Game>("Games", game);
                this.AfterDeleteGame(game);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new game into the airtable
        /// </summary>
        /// <param name="game">The game to insert into the airtable</param>
        /// <returns></returns>
        public dc.Game Insert(dc.Game game)
        {
            try
            {
                this.BeforeAddGame(game);
                game = base.AddAirtableRow<dc.Game>("Game", "Games", "Games", game);
                this.AfterAddGame(game);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return game;
        }
        /// <summary>
        /// Returns a list of GameDetails
        /// </summary>
        /// <param name="view">the specific view to pull GameDetails from</param>
        /// <returns>The list of GameDetails from the given view</returns>
        public IEnumerable<dc.GameDetail> GetGameDetails(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("GameDetail", "GameDetails", "GameDetails", where, view, maxPages);
            return rows.ConvertTo<dc.GameDetail>();
        }

        /// <summary>
        /// Update the given gamedetail
        /// </summary>
        /// <param name="gamedetail">The gamedetail to update</param>
        public dc.GameDetail Update(dc.GameDetail gamedetail)
        {
            try
            {
                this.BeforeUpdateGameDetail(gamedetail);
                gamedetail = this.UpdateAirtableRow<dc.GameDetail>("GameDetail", "GameDetails", "GameDetails", gamedetail);
                this.AfterUpdateGameDetail(gamedetail);
                return gamedetail;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given gamedetail
        /// </summary>
        /// <param name="gamedetail">The gamedetail to delete</param>
        public void Delete(dc.GameDetail gamedetail)
        {
            try
            {
                this.BeforeDeleteGameDetail(gamedetail);
                this.DeleteAirtableRow<dc.GameDetail>("GameDetails", gamedetail);
                this.AfterDeleteGameDetail(gamedetail);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new gamedetail into the airtable
        /// </summary>
        /// <param name="gamedetail">The gamedetail to insert into the airtable</param>
        /// <returns></returns>
        public dc.GameDetail Insert(dc.GameDetail gamedetail)
        {
            try
            {
                this.BeforeAddGameDetail(gamedetail);
                gamedetail = base.AddAirtableRow<dc.GameDetail>("GameDetail", "GameDetails", "GameDetails", gamedetail);
                this.AfterAddGameDetail(gamedetail);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return gamedetail;
        }
        /// <summary>
        /// Returns a list of Characters
        /// </summary>
        /// <param name="view">the specific view to pull Characters from</param>
        /// <returns>The list of Characters from the given view</returns>
        public IEnumerable<dc.Character> GetCharacters(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Character", "Characters", "Characters", where, view, maxPages);
            return rows.ConvertTo<dc.Character>();
        }

        /// <summary>
        /// Update the given character
        /// </summary>
        /// <param name="character">The character to update</param>
        public dc.Character Update(dc.Character character)
        {
            try
            {
                this.BeforeUpdateCharacter(character);
                character = this.UpdateAirtableRow<dc.Character>("Character", "Characters", "Characters", character);
                this.AfterUpdateCharacter(character);
                return character;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given character
        /// </summary>
        /// <param name="character">The character to delete</param>
        public void Delete(dc.Character character)
        {
            try
            {
                this.BeforeDeleteCharacter(character);
                this.DeleteAirtableRow<dc.Character>("Characters", character);
                this.AfterDeleteCharacter(character);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new character into the airtable
        /// </summary>
        /// <param name="character">The character to insert into the airtable</param>
        /// <returns></returns>
        public dc.Character Insert(dc.Character character)
        {
            try
            {
                this.BeforeAddCharacter(character);
                character = base.AddAirtableRow<dc.Character>("Character", "Characters", "Characters", character);
                this.AfterAddCharacter(character);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return character;
        }
        /// <summary>
        /// Returns a list of AppUsers
        /// </summary>
        /// <param name="view">the specific view to pull AppUsers from</param>
        /// <returns>The list of AppUsers from the given view</returns>
        public IEnumerable<dc.AppUser> GetAppUsers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("AppUser", "AppUsers", "AppUsers", where, view, maxPages);
            return rows.ConvertTo<dc.AppUser>();
        }

        /// <summary>
        /// Update the given appuser
        /// </summary>
        /// <param name="appuser">The appuser to update</param>
        public dc.AppUser Update(dc.AppUser appuser)
        {
            try
            {
                this.BeforeUpdateAppUser(appuser);
                appuser = this.UpdateAirtableRow<dc.AppUser>("AppUser", "AppUsers", "AppUsers", appuser);
                this.AfterUpdateAppUser(appuser);
                return appuser;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given appuser
        /// </summary>
        /// <param name="appuser">The appuser to delete</param>
        public void Delete(dc.AppUser appuser)
        {
            try
            {
                this.BeforeDeleteAppUser(appuser);
                this.DeleteAirtableRow<dc.AppUser>("AppUsers", appuser);
                this.AfterDeleteAppUser(appuser);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new appuser into the airtable
        /// </summary>
        /// <param name="appuser">The appuser to insert into the airtable</param>
        /// <returns></returns>
        public dc.AppUser Insert(dc.AppUser appuser)
        {
            try
            {
                this.BeforeAddAppUser(appuser);
                appuser = base.AddAirtableRow<dc.AppUser>("AppUser", "AppUsers", "AppUsers", appuser);
                this.AfterAddAppUser(appuser);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return appuser;
        }
        /// <summary>
        /// Returns a list of Weapons
        /// </summary>
        /// <param name="view">the specific view to pull Weapons from</param>
        /// <returns>The list of Weapons from the given view</returns>
        public IEnumerable<dc.Weapon> GetWeapons(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Weapon", "Weapons", "Weapons", where, view, maxPages);
            return rows.ConvertTo<dc.Weapon>();
        }

        /// <summary>
        /// Update the given weapon
        /// </summary>
        /// <param name="weapon">The weapon to update</param>
        public dc.Weapon Update(dc.Weapon weapon)
        {
            try
            {
                this.BeforeUpdateWeapon(weapon);
                weapon = this.UpdateAirtableRow<dc.Weapon>("Weapon", "Weapons", "Weapons", weapon);
                this.AfterUpdateWeapon(weapon);
                return weapon;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given weapon
        /// </summary>
        /// <param name="weapon">The weapon to delete</param>
        public void Delete(dc.Weapon weapon)
        {
            try
            {
                this.BeforeDeleteWeapon(weapon);
                this.DeleteAirtableRow<dc.Weapon>("Weapons", weapon);
                this.AfterDeleteWeapon(weapon);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new weapon into the airtable
        /// </summary>
        /// <param name="weapon">The weapon to insert into the airtable</param>
        /// <returns></returns>
        public dc.Weapon Insert(dc.Weapon weapon)
        {
            try
            {
                this.BeforeAddWeapon(weapon);
                weapon = base.AddAirtableRow<dc.Weapon>("Weapon", "Weapons", "Weapons", weapon);
                this.AfterAddWeapon(weapon);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return weapon;
        }
        /// <summary>
        /// Returns a list of Levels
        /// </summary>
        /// <param name="view">the specific view to pull Levels from</param>
        /// <returns>The list of Levels from the given view</returns>
        public IEnumerable<dc.Level> GetLevels(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Level", "Levels", "Levels", where, view, maxPages);
            return rows.ConvertTo<dc.Level>();
        }

        /// <summary>
        /// Update the given level
        /// </summary>
        /// <param name="level">The level to update</param>
        public dc.Level Update(dc.Level level)
        {
            try
            {
                this.BeforeUpdateLevel(level);
                level = this.UpdateAirtableRow<dc.Level>("Level", "Levels", "Levels", level);
                this.AfterUpdateLevel(level);
                return level;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given level
        /// </summary>
        /// <param name="level">The level to delete</param>
        public void Delete(dc.Level level)
        {
            try
            {
                this.BeforeDeleteLevel(level);
                this.DeleteAirtableRow<dc.Level>("Levels", level);
                this.AfterDeleteLevel(level);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new level into the airtable
        /// </summary>
        /// <param name="level">The level to insert into the airtable</param>
        /// <returns></returns>
        public dc.Level Insert(dc.Level level)
        {
            try
            {
                this.BeforeAddLevel(level);
                level = base.AddAirtableRow<dc.Level>("Level", "Levels", "Levels", level);
                this.AfterAddLevel(level);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return level;
        }
    }
}
